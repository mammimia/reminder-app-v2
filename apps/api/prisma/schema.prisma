// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime?
    name      String
    folders   Folder[]

    @@map("categories")
}

model Folder {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime?
    name      String 
    color     String @default("#000000") @db.VarChar(7)
    categoryId String? 
    category   Category? @relation(fields: [categoryId], references: [id])
    reminders Reminder[]

    @@map("folders")
}

enum ReminderStatus {
    TODO
    IN_PROGRESS
    PENDING
    DONE
    CANCELED
}

model Reminder {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime?
    title     String
    content   String
    expiresAt DateTime?
    status    ReminderStatus @default(TODO)
    folderId  String?
    folder    Folder?  @relation(fields: [folderId], references: [id])

    @@map("reminders")
}

enum PaymentPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  ONE_TIME
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum PaymentMethod {
  CASH
  CARD
}

model PaymentType {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  name      String
  color     String @default("#000000") @db.VarChar(7)
  period    PaymentPeriod @default(ONE_TIME)

  Expense Transaction[]

  @@map("payment-types")
}

model Transaction {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  deletedAt     DateTime?
  title         String
  description   String?
  amount        Float
  type          TransactionType @default(EXPENSE)
  date          DateTime
  paymentMethod PaymentMethod
  paymentTypeId String
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])

  @@map("transactions")
}

enum Currency {
  TL
  USD
}

model Balance {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  amount    Float
  currency  Currency @default(TL) @unique

  @@map("balances")
}